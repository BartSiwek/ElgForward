#include "dxgi_format_helper.h"

#include <utility>
#include <cstdint>
#include <unordered_map>

#include <d3d11.h>

namespace Rendering {

std::pair<uint32_t, D3D_REGISTER_COMPONENT_TYPE> DxgiFormatToComponentsAndType(DXGI_FORMAT format) {
  static std::unordered_map<DXGI_FORMAT, std::pair<uint32_t, D3D_REGISTER_COMPONENT_TYPE>> type_map = {
    { DXGI_FORMAT_R32_FLOAT,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R32G32_FLOAT,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R32G32B32_FLOAT,{ 3, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R32G32B32A32_FLOAT,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16_FLOAT,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16_FLOAT,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16B16A16_FLOAT,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R11G11B10_FLOAT,{ 3, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R32_UINT,{ 1, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R32G32_UINT,{ 2, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R32G32B32_UINT,{ 3, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R32G32B32A32_UINT,{ 4, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R16_UINT,{ 1, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R16G16_UINT,{ 2, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R16G16B16A16_UINT,{ 4, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R8_UINT,{ 1, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R8G8_UINT,{ 2, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R8G8B8A8_UINT,{ 4, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R10G10B10A2_UINT,{ 4, D3D10_REGISTER_COMPONENT_UINT32 } },
    { DXGI_FORMAT_R32_SINT,{ 1, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R32G32_SINT,{ 2, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R32G32B32_SINT,{ 3, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R32G32B32A32_SINT,{ 4, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R16_SINT,{ 1, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R16G16_SINT,{ 2, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R16G16B16A16_SINT,{ 4, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R8_SINT,{ 1, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R8G8_SINT,{ 2, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R8G8B8A8_SINT,{ 4, D3D10_REGISTER_COMPONENT_SINT32 } },
    { DXGI_FORMAT_R16_UNORM,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16_UNORM,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16B16A16_UNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8_UNORM,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8G8_UNORM,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8G8B8A8_UNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_B8G8R8A8_UNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_B8G8R8X8_UNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R10G10B10A2_UNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16_SNORM,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16_SNORM,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R16G16B16A16_SNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8_SNORM,{ 1, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8G8_SNORM,{ 2, D3D_REGISTER_COMPONENT_FLOAT32 } },
    { DXGI_FORMAT_R8G8B8A8_SNORM,{ 4, D3D_REGISTER_COMPONENT_FLOAT32 } },
  };

  auto it = type_map.find(format);
  if (it == type_map.end()) {
    return std::make_pair<uint32_t, D3D_REGISTER_COMPONENT_TYPE>(0, D3D_REGISTER_COMPONENT_UNKNOWN);
  } 

  return it->second;
}

}  // namespace Rendering
